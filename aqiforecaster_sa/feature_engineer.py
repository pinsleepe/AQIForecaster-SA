import pandas as pd
from pathlib import Path
from tsfresh import extract_features
from tsfresh.utilities.dataframe_functions import impute


class FeatureEngineer:
    def __init__(self, data_path: Path):
        """
        Initialize the FeatureEngineer with long-format data.
        :param data: Path to the data folder.
        """
        self.timeseries_data = None
        self.data = pd.read_csv(data_path)
        self.data['datetime'] = pd.to_datetime(self.data['datetime'])  # Ensure datetime is parsed

    def add_time_features(self):
        """Adds time-based features to the data."""
        self.data['day_of_week'] = self.data['datetime'].dt.dayofweek
        self.data['is_weekend'] = self.data['day_of_week'] >= 5

    def add_lag_features(self, lag_periods):
        """Adds lag features for each time series based on 'parameter'."""
        pollutant_columns = ['no', 'no2', 'nox', 'o3']
        for column in pollutant_columns:
            for lag in lag_periods:
                self.data[f'{column}_lag_{lag}'] = self.data[column].shift(lag)

    def add_rolling_window_features(self, window_size):
        """Adds rolling window features for each time series based on 'parameter'."""
        pollutant_columns = ['no', 'no2', 'nox', 'o3']
        for column in pollutant_columns:
            self.data[f'{column}_rolling_mean_{window_size}'] = self.data[column].rolling(window=window_size).mean()
            self.data[f'{column}_rolling_std_{window_size}'] = self.data[column].rolling(window=window_size).std()

    def save_engineered_data(self, file_path: Path):
        """
        Saves the engineered data to a CSV file.

        :param file_path: The file path where the data should be saved.
        """
        file_path = file_path / 'engineered_data.csv'
        self.data.to_csv(file_path, index=False)
        print(f"Engineered data saved to {file_path}")

    def extract_tsfresh_features(self):
        """
        Extracts features using tsfresh from the time series data.
        """
        # Ensure 'datetime' is in the right format
        self.data['datetime'] = pd.to_datetime(self.data['datetime'])

        # Prepare data in long format for tsfresh
        df_long = self.data.reset_index().melt(id_vars=['datetime'], var_name='parameter', value_name='value')

        # Add an id column to distinguish different time series
        df_long['id'] = df_long['parameter']

        # Extract features
        extracted_features = extract_features(df_long, column_id='id', column_sort='datetime', column_value='value')

        # Impute any missing values generated by feature extraction
        imputed_features = impute(extracted_features)

        # Optionally, assign the result to an attribute or return it
        self.timeseries_data = imputed_features
